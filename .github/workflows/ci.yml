name: CI

on:
  push:
  pull_request:

jobs:
  flake8:
    name: Flake8 (Poetry)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.7'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies (poetry)
        run: poetry install --no-interaction --no-ansi --no-root

      - name: Run flake8
        run: poetry run flake8


  pytest:
    name: Pytest
    runs-on: ubuntu-latest
    needs: flake8
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.7'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies (poetry)
        run: poetry install --no-interaction --no-ansi --no-root

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV
          echo "SMM_STORE_DATA_AT=$(pwd)/tmp_test/github" >> $GITHUB_ENV
          mkdir -p "$(pwd)/tmp_test/github"

          TEMPLATE=$(cat <<EOF
            {
              "git_provider": "github",
              "github_token": "fake-token",
              "github_repository": "fake-repo-test",
              "git_repository_location": "$(pwd)/tmp_test/repo",
              "deployment_frequency_target_pipeline": "",
              "deployment_frequency_target_job": ""
            }
          EOF
          )

          echo "$TEMPLATE" > "$(pwd)/tmp_test/github/smm_config.json"
          mkdir -p "$(pwd)/tmp_test/repo"
          cp -R "$(pwd)/fixtures/github" "$(pwd)/tmp_test"
          chmod -R 755 "$(pwd)/tmp_test"

      - name: Run pytest
        run: poetry run pytest --cov=. --cov-report=xml

      - name: Save coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml


  upload-coverage:
    name: Upload Coverage
    runs-on: ubuntu-latest
    needs: pytest
    steps:
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          format: cobertura
          file: coverage.xml

  acceptance:
    needs: pytest
    name: "Acceptance tests CLI"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Install bashunit"
        run: |
          curl -s https://bashunit.typeddevs.com/install.sh > install.sh
          chmod +x install.sh
          ./install.sh

      - name: "Run test"
        run: "./lib/bashunit acceptance"
